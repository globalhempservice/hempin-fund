// src/app/campaigns/hempin-launch/confirm/page.tsx
'use client';

import { useEffect, useRef, useState } from 'react';
import Orb from '../../../../ui/organisms/Orb';

type TierKey = 'seed' | 'sprout' | 'stem' | 'field';
const TIER_MAP: Record<TierKey, { title: string; amount: number }> = {
  seed:   { title: 'Seed',   amount: 20 },
  sprout: { title: 'Sprout', amount: 50 },
  stem:   { title: 'Stem',   amount: 100 },
  field:  { title: 'Field',  amount: 500 },
};

const CAMPAIGN_SLUG = 'hempin-launch';
const PAYPAL_CLIENT_ID = process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID;

// ────────────────────────────────────────────────────────────────────────────
// Small UI bits in-file to keep this self-contained
// ────────────────────────────────────────────────────────────────────────────

function LeafCounter({ count }: { count: number }) {
  return (
    <div className="relative inline-flex items-center gap-2 rounded-full border border-white/15 bg-white/5 px-3 py-1.5 text-xs animate-[glitter_900ms_ease-out]">
      <span className="opacity-80">Leaf XP</span>
      <span className="rounded-full bg-emerald-500/20 px-2 py-0.5 text-emerald-300">+{count}</span>
    </div>
  );
}

function PrivacyModal({ open, onClose }: { open: boolean; onClose: () => void }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-50 grid place-items-center bg-black/60 px-4">
      <div className="relative w-full max-w-2xl rounded-2xl border border-white/10 bg-zinc-900 p-6 text-left">
        <button
          onClick={onClose}
          className="absolute right-3 top-3 rounded-md border border-white/15 bg-white/10 px-2 py-1 text-xs hover:bg-white/15"
          aria-label="Close privacy"
        >
          Close
        </button>
        <h2 className="text-lg font-semibold">Privacy notice</h2>
        <p className="mt-3 text-sm opacity-85">
          When you confirm your email here, we store it to create a pending Hempin profile and send
          you transactional updates related to your contribution (receipts, perks, and status).
        </p>
        <p className="mt-3 text-sm opacity-85">
          We do not sell your data. You can request account deletion later. Additional marketing
          emails will only be sent if you explicitly opt in elsewhere.
        </p>
        <p className="mt-3 text-sm opacity-85">
          Payment processing is handled securely by PayPal. We receive payment confirmations and
          associated metadata needed to deliver your perks.
        </p>
      </div>
    </div>
  );
}

// ────────────────────────────────────────────────────────────────────────────

export default function ConfirmPage() {
  // Prevent hydration mismatch:
  //  - First render (server + first client pass) uses default 'seed'
  //  - After mount, read ?tier= and update state once.
  const [mounted, setMounted] = useState(false);
  const [tierKey, setTierKey] = useState<TierKey>('seed');

  useEffect(() => {
    setMounted(true);
    try {
      const sp = new URLSearchParams(window.location.search);
      const raw = (sp.get('tier') || '').toLowerCase() as TierKey;
      if (raw && raw in TIER_MAP) setTierKey(raw);
    } catch {
      /* no-op */
    }
  }, []);

  const tier = TIER_MAP[tierKey] ?? TIER_MAP.seed;

  // UX state
  const [email, setEmail] = useState('');
  const [consent, setConsent] = useState(false);
  const [emailConfirmed, setEmailConfirmed] = useState(false);
  const [profileId, setProfileId] = useState<string | null>(null);

  const [xp, setXp] = useState(0);
  const [status, setStatus] = useState<null | { type: 'info' | 'error' | 'success'; msg: string }>(
    null
  );

  const [privacyOpen, setPrivacyOpen] = useState(false);

  // PayPal SDK
  const [sdkLoaded, setSdkLoaded] = useState(false);
  const [mountingButtons, setMountingButtons] = useState(false);
  const paypalDivRef = useRef<HTMLDivElement>(null);

  // little +1 leaf pop
  const spawnLeafBurst = () => {
    setXp((n) => n + 1);
    const node = document.createElement('div');
    node.textContent = '+1 🌿';
    node.className =
      'pointer-events-none fixed left-1/2 top-16 -translate-x-1/2 text-emerald-300 text-xs animate-[leafPop_1200ms_ease-out_forwards]';
    document.body.appendChild(node);
    setTimeout(() => node.remove(), 1250);
  };

  useEffect(() => {
    const id = 'leafPopKF';
    if (document.getElementById(id)) return;
    const style = document.createElement('style');
    style.id = id;
    style.textContent = `
      @keyframes leafPop {
        0% { opacity: 0; transform: translate(-50%, 0) scale(.9) }
        20% { opacity: .95 }
        100% { opacity: 0; transform: translate(-50%, -42px) scale(1.1) }
      }
      @keyframes glitter {
        0% { opacity: 0; filter: drop-shadow(0 0 0 rgba(16,185,129,0)); transform: scale(.95); }
        50% { opacity: 1; filter: drop-shadow(0 0 14px rgba(16,185,129,.35)); }
        100% { opacity: 1; filter: drop-shadow(0 0 0 rgba(16,185,129,0)); transform: scale(1); }
      }
    `;
    document.head.appendChild(style);
  }, []);

  // Load PayPal SDK early (ok), but render buttons only after email is confirmed
  useEffect(() => {
    if (!PAYPAL_CLIENT_ID) return;
    if ((window as any).paypal) {
      setSdkLoaded(true);
      return;
    }
    const script = document.createElement('script');
    script.src = `https://www.paypal.com/sdk/js?client-id=${encodeURIComponent(
      PAYPAL_CLIENT_ID
    )}&currency=USD&intent=capture`;
    script.async = true;
    script.onload = () => setSdkLoaded(true);
    script.onerror = () => setStatus({ type: 'error', msg: 'Failed to load PayPal SDK.' });
    document.body.appendChild(script);
  }, []);

  // Mount PayPal buttons only after email is confirmed
  useEffect(() => {
    if (!emailConfirmed || !sdkLoaded || mountingButtons) return;
    const container = paypalDivRef.current;
    if (!container) return;

    const paypal: any = (window as any).paypal;
    if (!paypal?.Buttons) return;

    setMountingButtons(true);
    container.innerHTML = '';

    const buttons = paypal.Buttons({
      style: { layout: 'vertical', color: 'gold', shape: 'pill', label: 'paypal' },
      createOrder: (_data: any, actions: any) => {
        return actions.order.create({
          purchase_units: [
            {
              description: `Hempin Launch — ${tier.title} tier`,
              amount: { value: tier.amount.toFixed(2), currency_code: 'USD' },
            },
          ],
        });
      },
      onApprove: async (_data: any, actions: any) => {
        try {
          const details = await actions.order.capture();
          // Optional server record (best-effort)
          try {
            await fetch('/api/pledge', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                profileId,
                email,
                campaignSlug: CAMPAIGN_SLUG,
                tierKey,
                amount: tier.amount,
                currency: 'USD',
                paypalCaptureId: details?.id,
              }),
            });
          } catch {}

          // 🎉 UX celebration
          spawnLeafBurst();
          spawnLeafBurst();
          setStatus({ type: 'success', msg: 'Payment captured. Thank you for your support!' });
        } catch (e: any) {
          setStatus({ type: 'error', msg: e?.message ?? 'Payment failed. Please try again.' });
        }
      },
      onError: (err: any) => {
        setStatus({ type: 'error', msg: err?.message ?? 'PayPal error. Please try again.' });
      },
    });

    buttons.render(container).catch(() => {
      setStatus({ type: 'error', msg: 'Failed to render PayPal buttons.' });
    });

    return () => {
      try {
        buttons.close?.();
      } catch {}
      setMountingButtons(false);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [emailConfirmed, sdkLoaded, tier.amount, tier.title, tierKey, profileId, email]);

  const emailOk = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const confirmEmail = async () => {
    if (!emailOk || !consent) {
      setStatus({
        type: 'error',
        msg: !emailOk ? 'Please enter a valid email.' : 'Please agree to the privacy notice.',
      });
      return;
    }
    setStatus({ type: 'info', msg: 'Confirming…' });

    try {
      const res = await fetch('/api/email-capture', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, campaignSlug: CAMPAIGN_SLUG, tierKey }),
      });
      const json = await res.json().catch(() => ({} as any));
      if (!res.ok || !json?.ok) throw new Error(json?.error || 'Failed to confirm email');

      setProfileId(json.profileId || null);

      // Show XP only now: +1 and reveal the pill
      spawnLeafBurst(); // this increments xp to 1
      setEmailConfirmed(true);

      setStatus({ type: 'info', msg: 'Email confirmed — you can pay securely with PayPal.' });
    } catch (e: any) {
      setStatus({ type: 'error', msg: e?.message ?? 'Something went wrong. Please retry.' });
    }
  };

  return (
    <main className="relative min-h-screen flex flex-col items-center justify-center px-6 py-16 text-center overflow-hidden">
      {/* Bigger background orb */}
      <Orb className="absolute inset-0 scale-[1.55] md:scale-[2.0]" />

      {/* Top: back link centered; XP shows only after email is confirmed */}
      <div className="relative z-10 w-full max-w-5xl">
        <div className="flex w-full justify-center">
          {emailConfirmed && <LeafCounter count={xp} />}
        </div>
        <div className="mt-2 flex w-full justify-center">
          <a
            href="/campaigns/hempin-launch"
            className="text-xs opacity-85 hover:opacity-100 underline underline-offset-4"
          >
            ← Back to campaign page
          </a>
        </div>
      </div>

      {/* Card */}
      <section className="relative z-10 mx-auto mt-8 w-full max-w-2xl rounded-2xl border border-white/10 bg-white/5 p-6">
        <p className="text-xs opacity-70 mb-2">Confirm your support</p>
        <h1 className="text-2xl md:text-3xl font-semibold tracking-tight">
          {TIER_MAP[tierKey]?.title ?? 'Seed'} — ${tier.amount}
        </h1>
        <p className="mt-2 text-sm opacity-80">
          Enter your email and consent below. You’ll then pay securely with PayPal.
        </p>

        {/* Email + consent (gate) */}
        {!emailConfirmed && (
          <div className="mt-6 text-left space-y-4">
            <div>
              <label htmlFor="email-input" className="text-sm">Email</label>
              <input
                id="email-input"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 w-full rounded-md border border-white/15 bg-zinc-900/60 px-3 py-2 outline-none"
                placeholder="you@domain.com"
                autoComplete="email"
                inputMode="email"
                required
              />
            </div>

            <div className="flex items-start gap-2 text-sm">
              <input
                id="consent"
                type="checkbox"
                checked={consent}
                onChange={(e) => setConsent(e.target.checked)}
                className="mt-1"
              />
              <label htmlFor="consent" className="opacity-85">
                I agree to share my email to receive updates and to create a Hempin profile later.{' '}
                <button
                  type="button"
                  onClick={() => setPrivacyOpen(true)}
                  className="underline underline-offset-4 hover:opacity-100 opacity-85"
                >
                  Privacy
                </button>
              </label>
            </div>

            <div className="pt-2">
              <button
                onClick={confirmEmail}
                className="w-full rounded-md border border-white/15 bg-white/90 px-4 py-2 text-sm font-medium text-zinc-900 hover:bg-white transition disabled:opacity-60"
                disabled={!emailOk || !consent}
              >
                Confirm email & continue
              </button>
            </div>
          </div>
        )}

        {/* PayPal area */}
        {emailConfirmed && (
          <div className="mt-8">
            {!PAYPAL_CLIENT_ID ? (
              <div className="rounded-md border border-white/15 bg-rose-500/10 p-3 text-rose-200 text-sm">
                PayPal is not configured. Set <code>NEXT_PUBLIC_PAYPAL_CLIENT_ID</code> in your
                environment (sandbox or live), then reload.
              </div>
            ) : (
              <div>
                <div ref={paypalDivRef} className="inline-block" />
                <p className="mt-2 text-xs opacity-60">
                  You’ll be charged <strong>${tier.amount.toFixed(2)}</strong> (USD).
                </p>
              </div>
            )}
          </div>
        )}

        {status && (
          <div
            className={`mt-6 rounded-md border px-3 py-2 text-sm ${
              status.type === 'success'
                ? 'border-emerald-500/30 bg-emerald-500/10 text-emerald-300'
                : status.type === 'error'
                ? 'border-rose-500/30 bg-rose-500/10 text-rose-200'
                : 'border-white/15 bg-white/5 text-white'
            }`}
            role="status"
          >
            {status.msg}
          </div>
        )}
      </section>

      <p className="relative z-10 mt-6 text-xs opacity-50">HEMPIN FUND — 2025</p>

      {/* Privacy modal */}
      <PrivacyModal open={privacyOpen} onClose={() => setPrivacyOpen(false)} />
    </main>
  );
}